rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ==========================================
    // HELPER FUNCTIONS
    // ==========================================
    
    function isSignedIn() { 
      return request.auth != null; 
    }
    
    function isOwner(uid) { 
      return isSignedIn() && request.auth.uid == uid; 
    }
    
    function protectedFields() {
      return [
        'isPremium',
        'premiumStatus', 
        'premiumStartDate',
        'premiumCurrentPeriodEnd',
        'currentPeriodEnd',
        'stripeCustomerId',
        'stripeSubscriptionId',
        'isAdmin',
        'isModerator',
        'totalXP',
        'level',
        'longestStreak',
        'impactAnnualEstimated',
        'impactAnnualVerified',
        'proofsVerifiedCount',
        'lastImpactRecalcAt'
      ];
    }
    
    function noProtectedFieldsChanged() {
      return !request.resource.data.diff(resource.data)
        .changedKeys()
        .hasAny(protectedFields());
    }
    
    function noProtectedFieldsInCreate() {
      return !request.resource.data.keys().hasAny(protectedFields());
    }
    
    // ==========================================
    // USERS COLLECTION
    // ==========================================
    match /users/{userId} {
      // Lecture : son propre profil
      allow read: if isOwner(userId);
      
      // Création : SIMPLIFIÉE - retirer l'exigence de createdAt
      allow create: if isOwner(userId) 
        && noProtectedFieldsInCreate();
      
      // Mise à jour : sans modifier les champs protégés
      allow update: if isOwner(userId) 
        && noProtectedFieldsChanged();
      
      // Suppression : pour son propre compte
      allow delete: if isOwner(userId);

      // ==========================================
      // SAVINGS EVENTS (sous-collection)
      // ==========================================
      match /savingsEvents/{eventId} {
        // Règles simples alignées sur userQuests qui fonctionnent
        allow read: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
        
        // Note: La validation métier (champs requis, types, bornes) est faite côté client
        // Le champ 'verified' est protégé côté service (toujours false à la création)
        // Les règles serveur pourront ajouter des validations plus tard si nécessaire
      }
    }
    
    // ==========================================
    // USER QUESTS (Progression des quêtes)
    // ==========================================
    match /userQuests/{questId} {
      // Lecture : CORRIGÉE - permettre la lecture si connecté et propriétaire
      allow read: if isSignedIn() 
        && (resource == null || resource.data.userId == request.auth.uid);
      
      // Création : pour soi-même avec champs requis
      allow create: if isSignedIn() 
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.keys().hasAll(['userId', 'questId', 'startedAt']);
      
      // Mise à jour : ses propres progressions
      allow update: if isSignedIn() 
        && resource.data.userId == request.auth.uid
        && request.resource.data.userId == request.auth.uid;
      
      // Suppression : ses propres progressions
      allow delete: if isSignedIn() 
        && resource.data.userId == request.auth.uid;
    }
    
    // ==========================================
    // QUESTS (Contenu pédagogique)
    // ==========================================
    match /quests/{questId} {
      allow read: if true;
      allow write: if false;
    }
    
    // ==========================================
    // STRIPE CUSTOMERS
    // ==========================================
    match /stripe_customers/{customerId} {
      allow read: if false;
      allow write: if false;
    }
    
    // ==========================================
    // CATEGORIES
    // ==========================================
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if false;
    }
    
    // ==========================================
    // USER STATS
    // ==========================================
    match /userStats/{userId} {
      // Lecture : CORRIGÉE - permettre même si le document n'existe pas
      allow read: if isOwner(userId);
      
      // Création : pour soi-même
      allow create: if isOwner(userId)
        && request.resource.data.userId == request.auth.uid;
      
      // Mise à jour : limitée
      allow update: if isOwner(userId)
        && request.resource.data.userId == resource.data.userId
        && !request.resource.data.diff(resource.data)
          .changedKeys()
          .hasAny(['totalXP', 'level']);
      
      // Suppression : pour son propre document
      allow delete: if isOwner(userId);
    }
    
    // ==========================================
    // DAILY CHALLENGES
    // ==========================================
    match /dailyChallenges/{challengeId} {
      // Lecture : CORRIGÉE - permettre même si le document n'existe pas
      allow read: if isSignedIn() 
        && (resource == null || resource.data.userId == request.auth.uid);
      
      // Création : pour soi-même
      allow create: if isSignedIn() 
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.keys().hasAll(['userId', 'questId', 'createdAt', 'startedAt']);
      
      // Mise à jour : ses propres défis
      allow update: if isSignedIn() 
        && resource.data.userId == request.auth.uid
        && request.resource.data.userId == request.auth.uid;
      
      // Suppression : ses propres défis
      allow delete: if isSignedIn() 
        && resource.data.userId == request.auth.uid;
    }
    
    // ==========================================
    // FEEDBACK
    // ==========================================
    match /feedback/{feedbackId} {
      allow read: if false;
      
      allow create: if isSignedIn()
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.keys().hasAll(['userId', 'message', 'createdAt']);
      
      allow update: if false;
      allow delete: if false;
    }
    
    // ==========================================
    // USER PROGRESS (Progression globale)
    // ==========================================
    match /userProgress/{userId} {
      // Lecture : son propre profil de progression
      allow read: if isOwner(userId);
      
      // Création : pour soi-même
      allow create: if isOwner(userId);
      
      // Mise à jour : ses propres données de progression
      allow update: if isOwner(userId);
      
      // Suppression : pour son propre document
      allow delete: if isOwner(userId);
    }
    
    // ==========================================
    // STREAK INCIDENTS
    // ==========================================
    match /streakIncidents/{incidentId} {
      // Lecture : ses propres incidents
      allow read: if isSignedIn() 
        && (resource == null || resource.data.userId == request.auth.uid);
      
      // Création : pour soi-même
      allow create: if isSignedIn() 
        && request.resource.data.userId == request.auth.uid;
      
      // Mise à jour : ses propres incidents
      allow update: if isSignedIn() 
        && resource.data.userId == request.auth.uid
        && request.resource.data.userId == request.auth.uid;
      
      // Suppression : ses propres incidents
      allow delete: if isSignedIn() 
        && resource.data.userId == request.auth.uid;
    }

    // ==========================================
    // ACHIEVEMENT SHARES
    // ==========================================
    match /achievement_shares/{shareId} {
      allow read: if true;
      
      allow create: if isSignedIn() 
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.keys().hasAll(['userId', 'questId', 'timestamp']);
      
      allow update: if false;
      allow delete: if false;
    }
    
    // ==========================================
    // CATCH-ALL
    // ==========================================
    match /{document=**} {
      allow read: if false;
      allow write: if false;
    }
  }
}